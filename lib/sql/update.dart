import 'package:mysql_client/mysql_client.dart';

import 'connection.dart';

//The purpose of the update class is to execute SQL update statements
class Update extends APIConnector {
  Update();

  //This function is used when you want to update multiple fields
  void updateInDatabase(List<String> toUpdate, String table, String condition,
      bool readFirst) async {
    //Initialize SQL statement
    String statement = "UPDATE $table SET";
    //Initialize columns
    List<String> columns;
    //If you want to update the first column (sometimes autogenerated)
    if (readFirst) {
      columns = await getColumns(table);
    } else {
      columns = await getColumnsIgnoreFirst(table);
    }

    //If the argument is valid (columns equal to params specified)
    if (isValidArgument(columns, toUpdate)) {
      //Construct the statement
      statement += constructUpdate(columns, toUpdate, condition);
    }
    //Open the connection
    MySQLConnection conn = await openConnection();
    //Execute the SQL statement
    await conn.execute(statement);
    //Close the connection
    conn.close();
  }

  //This function is used when you only have 1 column that you want to update
  Future<void> singleUpdateInDatabase(
      String column, String toUpdate, String table, String condition,
      {bool makeString = true}) async {
    //Initialize statement
    String statement = "UPDATE $table SET";
    //Construct the statement
    statement += constructSingleUpdate(column, toUpdate, condition,
        makeString: makeString);
    //Open the connection
    MySQLConnection conn = await openConnection();
    //Execute the SQL statement
    await conn.execute(statement);
    //Close the connection
    conn.close();
  }

  //Check to ensure that the argument is valid (columns equal to things updating)
  bool isValidArgument(List<String> cols, List<String> inserting) {
    //Check to make sure lengths are same
    if (cols.length == inserting.length) {
      return true;
    }
    return false;
  }

  //Helper function to build a multi-update query
  String constructUpdate(
      List<String> cols, List<String> params, String condition) {
    return buildQuery(cols, params, condition);
  }

  //Helper function to build a single update query
  String constructSingleUpdate(
      String column, String parameter, String condition,
      {bool makeString = true}) {
    return buildSingleQuery(column, parameter, condition,
        makeString: makeString);
  }

  //Builds the query with multiple parameters being updated
  String buildQuery(
      List<String> colList, List<String> paramList, String condition) {
    //Initialize query string
    String query = "";
    //Iterate over everything being updated and add it to the statement
    for (int x = 0; x < paramList.length; x++) {
      String currParam = paramList[x];
      String currCol = colList[x];
      query += (" $currCol = '$currParam',");
    }
    //Chop off the ',' at the end
    query = query.substring(0, query.length - 1);
    //Specify the condition
    query += " WHERE $condition";
    //Return the constructed statement
    return query;
  }

  //Builds a single query with parameter specified
  String buildSingleQuery(String column, String parameter, condition,
      {bool makeString = true}) {
    //If the value you're updating is a string, include the '' wrapper marks
    if (makeString) {
      return " $column = '$parameter' WHERE $condition";
    }
    // for types like int and bools
    return " $column = $parameter WHERE $condition";
  }
}
